.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Convos::Core::Connection 3"
.TH Convos::Core::Connection 3 "2014-01-28" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Convos::Core::Connection \- Represents a connection to an IRC server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Convos::Core::Connection;
\&
\&  $c = Convos::Core::Connection\->new(
\&         name => \*(Aqmagnet\*(Aq,
\&         login => \*(Aqusername\*(Aq,
\&         redis => Mojo::Redis\->new,
\&       );
\&
\&  $c\->connect;
\&
\&  Mojo::IOLoop\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module use Mojo::IRC to  up a connection to an \s-1IRC\s0 server. The
attributes used to do so is figured out from a redis server.
.PP
There are quite a few \s-1EVENTS\s0 that this module use:
.IP "\(bu" 4
\&\*(L"add_message\*(R" events
.Sp
\&\*(L"privmsg\*(R" in Mojo::IRC.
.IP "\(bu" 4
\&\*(L"add_server_message\*(R" events
.Sp
\&\*(L"rpl_yourhost\*(R" in Mojo::IRC, \*(L"rpl_motdstart\*(R" in Mojo::IRC, \*(L"rpl_motd\*(R" in Mojo::IRC,
\&\*(L"rpl_endofmotd\*(R" in Mojo::IRC, \*(L"rpl_welcome\*(R" in Mojo::IRC and \*(L"error\*(R" in Mojo::IRC.
.IP "\(bu" 4
Other events
.Sp
\&\*(L"irc_rpl_welcome\*(R", \*(L"irc_rpl_myinfo\*(R", \*(L"irc_join\*(R", \*(L"irc_part\*(R",
\&\*(L"irc_rpl_namreply\*(R", \*(L"irc_err_nosuchchannel\*(R" \*(L"irc_err_notonchannel\*(R"
\&\*(L"irc_err_bannedfromchan\*(R", l</irc_error> and \*(L"irc_quit\*(R".
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
.SS "login"
.IX Subsection "login"
The username of the owner.
.SS "redis"
.IX Subsection "redis"
Holds a Mojo::Redis object.
.SS "log"
.IX Subsection "log"
Holds a Mojo::Log object.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Checks for mandatory attributes: \*(L"login\*(R" and \*(L"name\*(R".
.SS "connect"
.IX Subsection "connect"
.Vb 1
\&  $self = $self\->connect;
.Ve
.PP
This method will create a new Mojo::IRC object with attribute data from
\&\*(L"redis\*(R". The values fetched from the backend is identified by \*(L"name\*(R" and
\&\*(L"login\*(R". This method then call \*(L"connect\*(R" in Mojo::IRC after the object is set
up.
.PP
Attributes fetched from backend: nick, user, host and channels. The latter
is set in \*(L"channels\*(R" and used by \*(L"irc_rpl_welcome\*(R".
.SS "channels_from_conversations"
.IX Subsection "channels_from_conversations"
.Vb 1
\&  @channels = $self\->channels_from_conversations(\e@conversations);
.Ve
.PP
This method returns an array ref of channels based on the conversations
input. It will use \*(L"name\*(R" to filter out the right list.
.SS "add_server_message"
.IX Subsection "add_server_message"
.Vb 1
\&  $self\->add_server_message(\e%message);
.Ve
.PP
Will look at \f(CW%message\fR and add it to the database as a server message
if it looks like one. Returns true if the message was added to redis.
.SS "add_message"
.IX Subsection "add_message"
.Vb 1
\&  $self\->add_message(\e%message);
.Ve
.PP
Will add a private message to the database.
.SS "disconnect"
.IX Subsection "disconnect"
Will disconnect from the \*(L"irc\*(R" server.
.SH "EVENT HANDLERS"
.IX Header "EVENT HANDLERS"
.SS "irc_rpl_welcome"
.IX Subsection "irc_rpl_welcome"
Example message:
.PP
:Zurich.CH.EU.Undernet.Org 001 somenick :Welcome to the UnderNet \s-1IRC\s0 Network, somenick
.SS "irc_rpl_whoisuser"
.IX Subsection "irc_rpl_whoisuser"
Reply with user info
.SS "irc_rpl_whoischannels"
.IX Subsection "irc_rpl_whoischannels"
Reply with user channels
.SS "irc_rpl_notopic"
.IX Subsection "irc_rpl_notopic"
.Vb 1
\&  :server 331 nick #channel :No topic is set.
.Ve
.SS "irc_rpl_topic"
.IX Subsection "irc_rpl_topic"
Reply with topic
.SS "irc_topic"
.IX Subsection "irc_topic"
.Vb 1
\&  :nick!~user@hostname TOPIC #channel :some topic
.Ve
.SS "irc_rpl_topicwhotime"
.IX Subsection "irc_rpl_topicwhotime"
Reply with who and when for topic change
.SS "irc_rpl_myinfo"
.IX Subsection "irc_rpl_myinfo"
Example message:
.PP
:Tampa.FL.US.Undernet.org 004 somenick Tampa.FL.US.Undernet.org u2.10.12.14 dioswkgx biklmnopstvrDR bklov
.SS "irc_join"
.IX Subsection "irc_join"
See \*(L"irc_join\*(R" in Mojo::IRC.
.SS "irc_nick"
.IX Subsection "irc_nick"
.Vb 1
\&  :old_nick!~username@1.2.3.4 NICK :new_nick
.Ve
.SS "irc_quit"
.IX Subsection "irc_quit"
.Vb 6
\&  {
\&    params => [ \*(AqQuit: leaving\*(Aq ],
\&    raw_line => \*(Aq:nick!~user@localhost QUIT :Quit: leaving\*(Aq,
\&    command => \*(AqQUIT\*(Aq,
\&    prefix => \*(Aqnick!~user@localhost\*(Aq
\&  };
.Ve
.SS "irc_part"
.IX Subsection "irc_part"
.SS "irc_err_bannedfromchan"
.IX Subsection "irc_err_bannedfromchan"
:electret.shadowcat.co.uk 474 nick #channel :Cannot join channel (+b)
.SS "irc_err_nosuchchannel"
.IX Subsection "irc_err_nosuchchannel"
:astral.shadowcat.co.uk 403 nick #channel :No such channel
.SS "irc_err_notonchannel"
.IX Subsection "irc_err_notonchannel"
:electret.shadowcat.co.uk 442 nick #channel :You're not on that channel
.SS "irc_rpl_namreply"
.IX Subsection "irc_rpl_namreply"
Example message:
.PP
:Budapest.Hu.Eu.Undernet.org 353 somenick = #html :somenick Indig0 Wildblue \f(CW@HTML\fR \f(CW@CSS\fR \f(CW@Luch1an\fR \f(CW@Steaua_\fR Indig0_ Pilum \f(CW@fade\fR
.SS "irc_rpl_liststart"
.IX Subsection "irc_rpl_liststart"
:servername 321 fooman Channel :Users  Name
.SS "irc_rpl_list"
.IX Subsection "irc_rpl_list"
:servername 322 somenick #channel 10 :[+n] some topic
.SS "irc_rpl_listend"
.IX Subsection "irc_rpl_listend"
:servername 323 somenick :End of /LIST
.SS "irc_mode"
.IX Subsection "irc_mode"
.Vb 2
\&  :nick!user@host MODE #channel +o othernick
\&  :nick!user@host MODE yournick +i
.Ve
.SS "irc_error"
.IX Subsection "irc_error"
Example message:
.PP
\&\s-1ERROR\s0 :Closing Link: somenick by Tampa.FL.US.Undernet.org (Sorry, your connection class is full \- try again later or try another server)
.SS "cmd_nick"
.IX Subsection "cmd_nick"
Handle nick commands from user. Change nick and set new nick in redis.
.SS "cmd_join"
.IX Subsection "cmd_join"
Handle join commands from user. Add to channel set.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
See Convos.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen
.PP
Marcus Ramberg
