.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Convos::Core 3"
.TH Convos::Core 3 "2014-01-28" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Convos::Core \- TODO
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1TODO\s0
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "log"
.IX Subsection "log"
Holds a Mojo::Log object.
.SS "redis"
.IX Subsection "redis"
Holds a Mojo::Redis object.
.SH "METHODS"
.IX Header "METHODS"
.SS "control"
.IX Subsection "control"
.Vb 1
\&  $self\->control($command, $cb);
.Ve
.PP
Used to issue a control command.
.SS "send_convos_message"
.IX Subsection "send_convos_message"
.Vb 2
\&  $self = $self\->send_convos_message($login, $message);
\&  $self = $self\->send_convos_message($login, $message, $cb);
.Ve
.PP
Used to add a \f(CW$message\fR to the user \f(CW$login\fR.
.SS "start_convos_conversation"
.IX Subsection "start_convos_conversation"
.Vb 1
\&  $self = $self\->start_convos_conversation($login);
.Ve
.PP
Will add default messages to the convos conversation.
.SS "start"
.IX Subsection "start"
Will fetch connection information from the database and try to connect to them.
.SS "add_connection"
.IX Subsection "add_connection"
.Vb 8
\&  $self\->add_connection({
\&    channels => [ \*(Aq#foo\*(Aq, \*(Aq#bar\*(Aq, \*(Aq...\*(Aq ],
\&    login => $str,
\&    name => $str,
\&    nick => $str,
\&    server => $str, # irc_server[:port]
\&    tls => $bool,
\&  }, $callback);
.Ve
.PP
Add a new connection to redis. Will create a new connection id and
set all the keys in the \f(CW%connection\fR hash
.SS "update_connection"
.IX Subsection "update_connection"
.Vb 7
\&  $self\->update_connection({
\&    login => $str,
\&    name => $str,
\&    nick => $str,
\&    server => $str, # irc_server[:port]
\&    tls => $bool,
\&  }, $callback);
.Ve
.PP
Update a connection's settings. This might issue a reconnect or issue
\&\s-1IRC\s0 commands to reflect the changes.
.SS "delete_connection"
.IX Subsection "delete_connection"
.Vb 4
\&  $self\->delete_connection({
\&    login => $str,
\&    name => $str,
\&  }, $cb);
.Ve
.SS "ctrl_stop"
.IX Subsection "ctrl_stop"
.Vb 1
\&  $self\->ctrl_stop($login, $server);
.Ve
.PP
Stop a connection by connection id.
.SS "ctrl_restart"
.IX Subsection "ctrl_restart"
.Vb 1
\&  $self\->ctrl_restart($login, $server);
.Ve
.PP
Restart a connection by connection id.
.SS "ctrl_start"
.IX Subsection "ctrl_start"
Start a single connection by connection id.
.SS "login"
.IX Subsection "login"
.Vb 1
\&  $self\->login({ login => $str, password => $str }, $callback);
.Ve
.PP
Will call callback after authenticating the user. \f(CW$callback\fR will receive
either:
.PP
.Vb 2
\&  $callback\->($self, \*(Aq\*(Aq); # success
\&  $callback\->($self, \*(Aqerror message\*(Aq); # on error
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
See Convos.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jan Henning Thorsen
.PP
Marcus Ramberg
